// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheSleepSynopsisAPI.Data;

#nullable disable

namespace TheSleepSynopsisAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.Dream", b =>
                {
                    b.Property<string>("DreamUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DreamText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DreamTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SleepEntryUUID")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DreamUUID");

                    b.HasIndex("SleepEntryUUID");

                    b.ToTable("Dreams");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.Friendship", b =>
                {
                    b.Property<string>("InitiatorUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecondUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InitiatorUUID", "SecondUUID");

                    b.HasIndex("SecondUUID");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.SleepEntry", b =>
                {
                    b.Property<string>("SleepUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("SleepEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SleepMood")
                        .HasColumnType("int");

                    b.Property<DateTime>("SleepStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUUID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SleepUUID");

                    b.HasIndex("UserUUID");

                    b.ToTable("SleepEntries");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.User", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserUUID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.UserAuth", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserUUID");

                    b.ToTable("UserAuth");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.UserRefreshToken", b =>
                {
                    b.Property<string>("UserUUID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TokenClient")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TokenExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TokenIssueDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserUUID", "RefreshToken");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.Dream", b =>
                {
                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.SleepEntry", "SleepEntry")
                        .WithMany("Dreams")
                        .HasForeignKey("SleepEntryUUID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SleepEntry");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.Friendship", b =>
                {
                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.User", "Initiator")
                        .WithMany("Following")
                        .HasForeignKey("InitiatorUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.User", "SecondUser")
                        .WithMany("Followers")
                        .HasForeignKey("SecondUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.SleepEntry", b =>
                {
                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.User", "User")
                        .WithMany("SleepEntries")
                        .HasForeignKey("UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.UserAuth", b =>
                {
                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.User", "User")
                        .WithOne("UserAuth")
                        .HasForeignKey("TheSleepSynopsisAPI.Domain.Models.UserAuth", "UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.UserRefreshToken", b =>
                {
                    b.HasOne("TheSleepSynopsisAPI.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.SleepEntry", b =>
                {
                    b.Navigation("Dreams");
                });

            modelBuilder.Entity("TheSleepSynopsisAPI.Domain.Models.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SleepEntries");

                    b.Navigation("UserAuth")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
